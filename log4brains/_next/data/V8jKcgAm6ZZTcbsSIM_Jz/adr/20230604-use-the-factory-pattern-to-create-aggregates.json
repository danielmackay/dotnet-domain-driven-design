{"pageProps":{"projectName":".NET Domain Driven Design","currentAdr":{"slug":"20230604-use-the-factory-pattern-to-create-aggregates","package":null,"title":"Use the Factory Pattern to Create Aggregates","status":"accepted","supersededBy":null,"tags":[],"deciders":["Daniel Mackay"],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nAggregate roots can be instansiated in a number of different ways.\n\n## Decision Drivers\n\n- Must work well with EF Core\n- Must be able to raise domain events on object creation\n- Must keep aggregate roots in a valid state at all times\n\n## Considered Options\n\n1. Factory Methods\n2. Constructors\n3. `required init` properties\n\n## Decision Outcome\n\nChosen option: \"1. Factory Methods\", because it is the only option that meets all the decision drivers.\n\n## Consequences\n\n- private constructors can be used to ensure that aggregates are always in a valid state\n- Need to use `null!` to remove nullable warnings\n\n## Pros and Cons of the Options\n\n### 1. Factory Methods\n\n- ✅ EF Core can still create the aggregate when hydrating data from the DB\n- ✅ Domain events can be raised when aggregates are created via the application, but not when they are hydrated from the DB\n- ✅ Provides a consistent way to create aggregates\n- ✅ Aggregates remain encapsulated\n\n### 2. Constructors\n\n- ❌ EF will incorrectly raise domain events when hydrating data from the DB\n- ❌ EF does not allow owned entities to be passed to constructors\n\n### 3. `required init` properties\n\n- ❌ Properties need to be passed to constructors to ensure they are in a valid state on object creation.  Can't use `required init` properties as they then become unmodifiable\n"},"creationDate":"2023-06-04T01:26:07.000Z","lastEditDate":"2023-06-04T01:26:07.000Z","lastEditAuthor":"Daniel Mackay [SSW]","publicationDate":null,"file":{"relativePath":"docs/decisions/20230604-use-the-factory-pattern-to-create-aggregates.md","absolutePath":"/home/runner/work/dotnet-ef-domain-driven-design/dotnet-ef-domain-driven-design/docs/decisions/20230604-use-the-factory-pattern-to-create-aggregates.md"},"repository":{"provider":"github","viewUrl":"https://github.com/danielmackay/dotnet-ef-domain-driven-design/blob/master/docs/decisions/20230604-use-the-factory-pattern-to-create-aggregates.md"}},"l4bVersion":"1.0.1"},"__N_SSG":true}